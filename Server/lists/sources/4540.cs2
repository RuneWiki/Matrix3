/* 
 * Script decompiled by jagdecs2 v3.2
 * Decompiler opts:
 * --------------
 * t1LocalAnalyzer:true
 * t2LocalAnalyzer:true
 * beautifier:true
 * --------------
 * Made by mgi125 ;)
 */


void script_4540(int a0,int a1,int a2,int a3,object a4,int a5,int a6,int a7,int a8,int a9,int a10,int a11,int a12) {
	int v6;
	int v15;
	cs2method_10467(0, a2);
	cs2method_10273(a2);
	if (a7 == -1 || a6 == -1) {
		int v25 = 5631;
		a6 = 5631;
		a7 = v25;
	}
	if (a11 == -1) {
		int v25 = 16777215;
	}
	int v23 = cs2method_10872(cs2method_10509(a0, a7, a4), a0);
	int v10 = cs2method_10060(cs2method_10051(cs2method_11048(cs2method_10805(v23, a7, a4), 1), a5), a8);
	int v24 = cs2method_10060(v23, 12);
	int v0 = cs2method_10060(v10, 12);
	switch (a1) {
		case 1:
		case 3:
			v24 = cs2method_10060(v24, 23);
			break;
		case 0:
			v0 = cs2method_10060(v0, 22);
			break;
		case 2:
			v0 = cs2method_10060(v0, 23);
	}
	int v18 = cs2method_11048(v24, 45);
	int v22 = cs2method_11048(v0, 45);
	int v11 = v18;
	cs2method_10283(v11, v22, 0, 0, a2);
	cs2method_10606(a2, 3, cs2method_10163(a2));
	switch (a1) {
		case 3:
			cs2method_10013(25, 2, 1, 1);
			cs2method_10063(1, 0, 0, 1);
			break;
		case 1:
			cs2method_10013(25, 2, 1, 1);
			cs2method_10063(1, 0, 2, 1);
			break;
		case 0:
			cs2method_10013(2, 24, 1, 1);
			cs2method_10063(0, 1, 1, 0);
			break;
		case 2:
			cs2method_10013(2, 25, 1, 1);
			cs2method_10063(0, 1, 1, 2);
			break;
		default:
			cs2method_10013(2, 2, 1, 1);
			cs2method_10063(0, 0, 1, 1);
	}
	cs2method_10811(0);
	cs2method_10238(1);
	cs2method_10606(a2, 5, cs2method_10163(a2));
	switch (a1) {
		case 3:
			cs2method_10013(27, 10, 1, 0);
			cs2method_10063(2, 0, 0, 0);
			break;
		case 1:
			cs2method_10013(27, 10, 1, 0);
			cs2method_10063(2, 0, 2, 0);
			break;
		default:
			cs2method_10013(4, 10, 1, 0);
			cs2method_10063(0, 0, 1, 0);
			break;
		case 2:
			cs2method_10013(4, 10, 1, 0);
			cs2method_10063(0, 23, 1, 0);
	}
	cs2method_10310(4649);
	cs2method_10577(1);
	cs2method_10606(a2, 5, cs2method_10163(a2));
	switch (a1) {
		case 3:
			cs2method_10013(27, 10, 1, 0);
			cs2method_10063(2, 0, 0, 2);
			break;
		case 1:
			cs2method_10013(27, 10, 1, 0);
			cs2method_10063(2, 0, 2, 2);
			break;
		case 0:
			cs2method_10013(4, 10, 1, 0);
			cs2method_10063(0, 22, 1, 2);
			break;
		default:
			cs2method_10013(4, 10, 1, 0);
			cs2method_10063(0, 0, 1, 2);
	}
	cs2method_10310(4649);
	cs2method_10577(1);
	cs2method_10230(1);
	cs2method_10606(a2, 5, cs2method_10163(a2));
	switch (a1) {
		default:
			cs2method_10013(10, 4, 0, 1);
			cs2method_10063(0, 0, 0, 1);
			break;
		case 1:
			cs2method_10013(10, 4, 0, 1);
			cs2method_10063(23, 0, 0, 1);
			break;
		case 0:
			cs2method_10013(10, 26, 0, 1);
			cs2method_10063(0, 2, 0, 0);
			break;
		case 2:
			cs2method_10013(10, 27, 0, 1);
			cs2method_10063(0, 2, 0, 2);
	}
	cs2method_10310(4651);
	cs2method_10577(1);
	cs2method_10434(1);
	cs2method_10606(a2, 5, cs2method_10163(a2));
	switch (a1) {
		case 3:
			cs2method_10013(10, 4, 0, 1);
			cs2method_10063(23, 0, 2, 1);
			break;
		default:
			cs2method_10013(10, 4, 0, 1);
			cs2method_10063(0, 0, 2, 1);
			break;
		case 0:
			cs2method_10013(10, 26, 0, 1);
			cs2method_10063(0, 2, 2, 0);
			break;
		case 2:
			cs2method_10013(10, 27, 0, 1);
			cs2method_10063(0, 2, 2, 2);
	}
	cs2method_10310(4651);
	cs2method_10577(1);
	cs2method_10606(a2, 5, cs2method_10163(a2));
	cs2method_10013(10, 10, 0, 0);
	switch (a1) {
		case 1:
			cs2method_10063(23, 0, 0, 0);
			break;
		default:
			cs2method_10063(0, 0, 0, 0);
			break;
		case 2:
			cs2method_10063(0, 23, 0, 0);
	}
	cs2method_10310(4650);
	cs2method_10434(1);
	cs2method_10606(a2, 5, cs2method_10163(a2));
	cs2method_10013(10, 10, 0, 0);
	switch (a1) {
		case 3:
			cs2method_10063(23, 0, 2, 0);
			break;
		default:
			cs2method_10063(0, 0, 2, 0);
			break;
		case 2:
			cs2method_10063(0, 23, 2, 0);
	}
	cs2method_10310(4650);
	cs2method_10606(a2, 5, cs2method_10163(a2));
	cs2method_10013(10, 10, 0, 0);
	switch (a1) {
		case 1:
			cs2method_10063(23, 0, 0, 2);
			break;
		case 0:
			cs2method_10063(0, 22, 0, 2);
			break;
		default:
			cs2method_10063(0, 0, 0, 2);
	}
	cs2method_10310(4650);
	cs2method_10434(1);
	cs2method_10230(1);
	cs2method_10606(a2, 5, cs2method_10163(a2));
	cs2method_10013(10, 10, 0, 0);
	switch (a1) {
		case 3:
			cs2method_10063(23, 0, 2, 2);
			break;
		case 0:
			cs2method_10063(0, 22, 2, 2);
			break;
		default:
			cs2method_10063(0, 0, 2, 2);
	}
	cs2method_10310(4650);
	cs2method_10230(1);
	cs2method_10606(a2, 4, cs2method_10163(a2));
	cs2method_10013(v23, v10, 0, 0);
	switch (a1) {
		case 3:
			cs2method_10063(6, 0, 0, 1);
			break;
		case 1:
			cs2method_10063(6, 0, 2, 1);
			break;
		case 0:
			cs2method_10063(0, 6, 1, 0);
			break;
		case 2:
			cs2method_10063(0, 6, 1, 2);
			break;
		default:
			cs2method_10063(0, 0, 1, 1);
	}
	cs2method_10811(16101953);
	cs2method_10692(a6);
	cs2method_11105(1, 1, a5);
	cs2method_10797(a4);
	cs2method_10606(a2, 5, cs2method_10163(a2));
	int v8 = 0;
	int v3 = 0;
	int v12 = 0;
	int v5 = 0;
	int v2 = cs2method_10982(a2);
	if (v2 != -1) {
		int v26 = script_3365(v2);
		v12 = script_3366(v2);
		v8 = v26;
		int v25 = cs2method_10060(v8, cs2method_10236(v2));
		v15 = cs2method_10060(v12, cs2method_10823(v2));
		v6 = v25;
	} else if (v2 != -1) {
		int v25 = cs2method_10236(v2);
		v15 = cs2method_10823(v2);
		v6 = v25;
	} else {
		int v25 = 765;
		v15 = 503;
		v6 = v25;
	}
	int v13 = 0;
	int v4 = 0;
	int v7 = 0;
	int v20 = 0;
	int v1 = 0;
	int v9 = 0;
	int v16 = 0;
	if (cs2method_11038(a12, a10) == 1 || a10 == -1 && cs2method_10324(a12) == 1) {
		int v37 = script_1743();
		int v25 = script_1744();
		int v33 = cs2method_10488();
		int v28 = cs2method_10664();
		int v29 = v37;
		int v36 = v25;
		int v31 = v33;
		int v26 = v29;
		int v32 = v36;
		int v27 = v26;
		switch (a1) {
			case 3:
				int v39 = cs2method_10461(v27, v11);
				v9 = cs2method_10461(cs2method_10060(v32, a3), cs2method_10968(v22, 2));
				v1 = v39;
				if (v9 < v12) {
					int v40 = cs2method_10461(v9, v12);
					v9 = cs2method_10461(v9, v40);
					v16 = cs2method_11048(v40, cs2method_10461(0, cs2method_10968(cs2method_10461(v22, 35), 2)));
				} else {
					if (cs2method_10060(v9, v22) > v15) {
						int v25 = cs2method_10461(cs2method_10060(v9, v22), v15);
						v9 = cs2method_10461(v9, v25);
						v16 = cs2method_10872(v25, cs2method_10968(cs2method_10461(v22, 35), 2));
					}
				}
				cs2method_10013(25, 24, 0, 0);
				cs2method_10063(0, v16, 2, 1);
				break;
			case 1:
				int v38 = cs2method_10060(v27, v31);
				v9 = cs2method_10461(cs2method_10060(v32, a3), cs2method_10968(v22, 2));
				v1 = v38;
				if (v9 < v12) {
					int v40 = cs2method_10461(v9, v12);
					v9 = cs2method_10461(v9, v40);
					v16 = cs2method_11048(v40, cs2method_10461(0, cs2method_10968(cs2method_10461(v22, 35), 2)));
				} else {
					if (cs2method_10060(v9, v22) > v15) {
						int v25 = cs2method_10461(cs2method_10060(v9, v22), v15);
						v9 = cs2method_10461(v9, v25);
						v16 = cs2method_10872(v25, cs2method_10968(cs2method_10461(v22, 35), 2));
					}
				}
				cs2method_10013(25, 24, 0, 0);
				cs2method_11142(32768);
				cs2method_10063(0, v16, 0, 1);
				break;
			case 0:
				int v30 = cs2method_10461(cs2method_10060(v27, a9), cs2method_10968(v11, 2));
				v9 = cs2method_10461(v32, v22);
				v1 = v30;
				if (v1 < v8) {
					int v40 = cs2method_10461(v1, v8);
					v1 = cs2method_10461(v1, v40);
					v16 = cs2method_11048(v40, cs2method_10461(0, cs2method_10968(cs2method_10461(v11, 35), 2)));
				} else {
					if (cs2method_10060(v1, v11) > v6) {
						int v25 = cs2method_10461(cs2method_10060(v1, v11), v6);
						v1 = cs2method_10461(v1, v25);
						v16 = cs2method_10872(v25, cs2method_10968(cs2method_10461(v11, 35), 2));
					}
				}
				cs2method_10013(24, 25, 0, 0);
				cs2method_11142(49152);
				cs2method_10063(v16, 0, 1, 2);
				break;
			case 2:
				int v35 = cs2method_10461(cs2method_10060(v27, a9), cs2method_10968(v11, 2));
				v9 = cs2method_10060(v32, v28);
				v1 = v35;
				if (v1 < v8) {
					int v40 = cs2method_10461(v1, v8);
					v1 = cs2method_10461(v1, v40);
					v16 = cs2method_11048(v40, cs2method_10461(0, cs2method_10968(cs2method_10461(v11, 35), 2)));
				} else {
					if (cs2method_10060(v1, v11) > v6) {
						int v25 = cs2method_10461(cs2method_10060(v1, v11), v6);
						v1 = cs2method_10461(v1, v25);
						v16 = cs2method_10872(v25, cs2method_10968(cs2method_10461(v11, 35), 2));
					}
				}
				cs2method_10013(24, 25, 0, 0);
				cs2method_11142(16384);
				cs2method_10063(v16, 0, 1, 0);
				break;
			default:
				cs2method_10269(1);
				int v34 = cs2method_10461(a9, cs2method_10968(v11, 2));
				v9 = cs2method_10461(a3, cs2method_10968(v22, 2));
				v1 = v34;
		}
	} else {
		cs2method_10467(1, a2);
	}
	int v14 = cs2method_10461(v1, v8);
	int v17 = cs2method_10461(v9, v12);
	int v19 = cs2method_10872(cs2method_11048(0, v14), cs2method_10461(cs2method_10236(cs2method_10155(a2)), v11));
	int v21 = cs2method_10872(cs2method_11048(0, v17), cs2method_10461(cs2method_10823(cs2method_10155(a2)), v22));
	cs2method_10112(v19, v21, 0, 0, a2);
	return;
}
