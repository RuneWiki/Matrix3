/* 
 * Script decompiled by jagdecs2 v3.2
 * Decompiler opts:
 * --------------
 * t1LocalAnalyzer:true
 * t2LocalAnalyzer:true
 * beautifier:true
 * --------------
 * Made by mgi125 ;)
 */


void script_4409(int a0) {
	int v0 = script_284(cs2method_10472());
	switch (cs2_configs['cfg1007']) {
		case 1:
			script_2766(0, 50, a0);
			break;
		case 11:
			script_2768(50, a0);
			cs2method_11031(0, 2);
			cs2method_11031(1, 2);
			cs2method_10971(0, 0, cs2method_10327(v0, 28, 0, 27), 900, cs2method_10327(v0, 28, 0, 27), 900, 0);
			cs2method_10971(0, 1, cs2method_10327(v0, 28, 0, 27), 750, cs2method_10327(v0, 28, 0, 27), 750, 0);
			cs2method_10971(1, 0, cs2method_10327(v0, 23, 0, 8), 200, cs2method_10327(v0, 23, 0, 8), 200, 0);
			cs2method_10971(1, 1, cs2method_10327(v0, 23, 0, 8), 250, cs2method_10327(v0, 23, 0, 8), 250, 0);
			cs2method_10382(0, 0, 50, 0, 1, 0);
			break;
		case 12:
			script_2766(0, 50, a0);
			break;
		case 21:
			script_2768(50, a0);
			cs2method_11031(0, 2);
			cs2method_11031(1, 2);
			cs2method_10971(0, 0, cs2method_10327(v0, 16, 0, 26), 900, cs2method_10327(v0, 16, 0, 26), 900, 0);
			cs2method_10971(0, 1, cs2method_10327(v0, 16, 0, 26), 900, cs2method_10327(v0, 16, 0, 26), 900, 0);
			cs2method_10971(1, 0, cs2method_10327(v0, 24, 0, 37), 500, cs2method_10327(v0, 24, 0, 37), 500, 0);
			cs2method_10971(1, 1, cs2method_10327(v0, 24, 0, 37), 500, cs2method_10327(v0, 24, 0, 37), 500, 0);
			cs2method_10382(0, 0, 100, 0, 1, 0);
			break;
		case 22:
			script_2766(0, 50, a0);
			break;
		case 31:
			script_2768(50, a0);
			cs2method_11031(0, 2);
			cs2method_11031(1, 2);
			cs2method_10971(0, 0, cs2method_10327(v0, 31, 0, 11), 700, cs2method_10327(v0, 31, 0, 11), 700, 0);
			cs2method_10971(0, 1, cs2method_10327(v0, 24, 0, 11), 800, cs2method_10327(v0, 24, 0, 11), 800, 0);
			cs2method_10971(1, 0, cs2method_10327(v0, 28, 0, 19), 350, cs2method_10327(v0, 28, 0, 19), 350, 0);
			cs2method_10971(1, 1, cs2method_10327(v0, 28, 0, 19), 350, cs2method_10327(v0, 28, 0, 19), 350, 0);
			cs2method_10382(0, 0, 50, 0, 1, 0);
			break;
		case 32:
			script_2766(0, 50, a0);
			break;
		case 41:
			script_2768(50, a0);
			cs2method_11031(0, 2);
			cs2method_11031(1, 2);
			cs2method_10971(0, 0, cs2method_10327(v0, 37, 0, 41), 1200, cs2method_10327(v0, 37, 0, 41), 1200, 0);
			cs2method_10971(0, 1, cs2method_10327(v0, 37, 0, 41), 800, cs2method_10327(v0, 37, 0, 41), 800, 0);
			cs2method_10971(1, 0, cs2method_10327(v0, 27, 0, 49), 700, cs2method_10327(v0, 27, 0, 49), 700, 0);
			cs2method_10971(1, 1, cs2method_10327(v0, 27, 0, 49), 650, cs2method_10327(v0, 27, 0, 49), 650, 0);
			cs2method_10382(0, 0, 50, 0, 1, 0);
			break;
		case 42:
			script_2766(0, 50, a0);
			break;
		case 51:
			script_2768(50, a0);
			cs2method_11031(0, 2);
			cs2method_11031(1, 2);
			cs2method_10971(0, 0, cs2method_10327(v0, 37, 0, 9), 1300, cs2method_10327(v0, 37, 0, 9), 1300, 0);
			cs2method_10971(0, 1, cs2method_10327(v0, 37, 0, 9), 1300, cs2method_10327(v0, 37, 0, 9), 1300, 0);
			cs2method_10971(1, 0, cs2method_10327(v0, 27, 0, 17), 700, cs2method_10327(v0, 27, 0, 17), 700, 0);
			cs2method_10971(1, 1, cs2method_10327(v0, 27, 0, 17), 700, cs2method_10327(v0, 27, 0, 17), 700, 0);
			cs2method_10382(0, 0, 50, 0, 1, 0);
			break;
		case 52:
			script_2766(0, 50, a0);
			break;
		case 61:
			script_2768(50, a0);
			cs2method_11031(0, 2);
			cs2method_11031(1, 2);
			cs2method_10971(0, 0, cs2method_10327(v0, 33, 0, 30), 600, cs2method_10327(v0, 33, 0, 30), 600, 0);
			cs2method_10971(0, 1, cs2method_10327(v0, 33, 0, 30), 550, cs2method_10327(v0, 33, 0, 30), 550, 0);
			cs2method_10971(1, 0, cs2method_10327(v0, 24, 0, 33), 180, cs2method_10327(v0, 24, 0, 33), 180, 0);
			cs2method_10971(1, 1, cs2method_10327(v0, 24, 0, 33), 180, cs2method_10327(v0, 24, 0, 33), 180, 0);
			cs2method_10382(0, 0, 30, 0, 1, 0);
			break;
		case 62:
			script_2766(0, 50, a0);
			break;
		case 71:
			script_2768(50, a0);
			cs2method_11031(0, 2);
			cs2method_11031(1, 2);
			cs2method_10971(0, 0, cs2method_10327(v0, 18, 1, 34), 1000, cs2method_10327(v0, 18, 1, 34), 1000, 0);
			cs2method_10971(0, 1, cs2method_10327(v0, 18, 1, 44), 1000, cs2method_10327(v0, 18, 1, 44), 1000, 0);
			cs2method_10971(1, 0, cs2method_10327(v0, 24, 1, 39), 800, cs2method_10327(v0, 24, 1, 39), 800, 0);
			cs2method_10971(1, 1, cs2method_10327(v0, 24, 1, 39), 700, cs2method_10327(v0, 24, 1, 39), 700, 0);
			cs2method_10382(0, 0, 80, 0, 1, 0);
			break;
		case 72:
			script_2766(0, 50, a0);
			break;
		case 81:
			script_2768(50, a0);
			cs2method_11031(0, 2);
			cs2method_11031(1, 2);
			cs2method_10971(0, 0, cs2method_10327(v0, 15, 1, 18), 700, cs2method_10327(v0, 15, 1, 18), 700, 0);
			cs2method_10971(0, 1, cs2method_10327(v0, 15, 1, 18), 700, cs2method_10327(v0, 15, 1, 18), 700, 0);
			cs2method_10971(1, 0, cs2method_10327(v0, 24, 1, 30), 300, cs2method_10327(v0, 24, 1, 30), 300, 0);
			cs2method_10971(1, 1, cs2method_10327(v0, 24, 1, 12), 600, cs2method_10327(v0, 24, 1, 12), 600, 0);
			cs2method_10382(0, 0, 300, 0, 1, 0);
			break;
		case 82:
			script_2766(0, 50, a0);
			break;
		case 999:
			script_2766(0, 50, a0);
			break;
		case 1000:
			cs2method_10893();
			script_2768(50, a0);
			break;
		default:
			cs2method_10893();
	}
	return;
}
