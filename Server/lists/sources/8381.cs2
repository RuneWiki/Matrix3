/* 
 * Script decompiled by jagdecs2 v3.2
 * Decompiler opts:
 * --------------
 * t1LocalAnalyzer:true
 * t2LocalAnalyzer:true
 * beautifier:true
 * --------------
 * Made by mgi125 ;)
 */


script_8381_struct(4,0,0) script_8381(int a0,int a1,int a2,int a3,int a4,int a5) {
	int v21 = a3;
	int v17 = a1;
	int v25 = a4;
	int v12 = a0;
	int v2 = idx17mapData('i', 'J', 7716, a2);
	int v5 = idx22mapAttribute(v2, 3503);
	int v13 = idx22mapAttribute(v2, 3494);
	int v16 = 0;
	int v24 = 0;
	int v6 = 0;
	int v8 = -1;
	int v18 = 0;
	int v22 = 0;
	int v1 = 0;
	int v9 = 0;
	int v0 = 0;
	int v15 = 0;
	int v23 = cs2method_10924(7718);
	int v14 = -1;
	int v7 = v23;
	int v3 = cs2method_10461(v7, 1);
	int v20 = 0;
	if (v13 != -1) {
		v16 = idx22mapAttribute(v13, 3541);
		v24 = idx22mapAttribute(v13, 3542);
	}
	cs2method_10112(v21, v17, 0, 0, v5);
	cs2method_10283(v25, v12, 0, 0, v5);
	while (v20 < v23) {
		int v26 = idx17mapData('i', 'i', 7718, v20);
		int v27 = idx22mapAttribute(idx17mapData('i', 'J', 7716, v26), 3503);
		if (cs2method_10609(v27) == 0 && v26 != a2) {
			int v30 = v5;
			int v28 = v27;
			script_8395_struct(4,0,0) v29 = script_8395(v30, v28);
			int v4 = v29.intpart_3;
			int v19 = v29.intpart_2;
			int v10 = v29.intpart_1;
			int v11 = v29.intpart_0;
			if (cs2method_10060(cs2method_10060(cs2method_10060(v10, v11), v4), v19) > 0) {
				switch (a5) {
					case 1:
						v17 = cs2method_10060(v17, v4);
						v12 = cs2method_10461(v12, v4);
						break;
					case 3:
						v21 = cs2method_10060(v21, v10);
						v25 = cs2method_10461(v25, v10);
						break;
					case 4:
						v25 = cs2method_10461(v25, v11);
						break;
					case 6:
						v12 = cs2method_10461(v12, v19);
						break;
					case 0:
						if (v10 < v4 && cs2method_10461(v25, v10) >= v16) {
							v21 = cs2method_10060(v21, v10);
							v25 = cs2method_10461(v25, v10);
						} else if (cs2method_10461(v12, v4) >= v24) {
							v17 = cs2method_10060(v17, v4);
							v12 = cs2method_10461(v12, v4);
						} else {
							v21 = cs2method_10060(v21, v10);
							v25 = cs2method_10461(v25, v10);
						}
						break;
					case 2:
						if (v11 < v4 && cs2method_10461(v25, v11) >= v16) {
							v25 = cs2method_10461(v25, v11);
						} else if (cs2method_10461(v12, v4) >= v24) {
							v17 = cs2method_10060(v17, v4);
							v12 = cs2method_10461(v12, v4);
						} else {
							v25 = cs2method_10461(v25, v11);
						}
						break;
					case 5:
						if (v10 < v19 && cs2method_10461(v25, v10) >= v16) {
							v21 = cs2method_10060(v21, v10);
							v25 = cs2method_10461(v25, v10);
						} else if (cs2method_10461(v12, v19) >= v24) {
							v12 = cs2method_10461(v12, v19);
						} else {
							v21 = cs2method_10060(v21, v10);
							v25 = cs2method_10461(v25, v10);
						}
						break;
					case 7:
						if (v11 < v19 && cs2method_10461(v25, v11) >= v16) {
							v25 = cs2method_10461(v25, v11);
						} else if (cs2method_10461(v12, v19) >= v24) {
							v12 = cs2method_10461(v12, v19);
						} else {
							v25 = cs2method_10461(v25, v11);
						}
				}
				cs2method_10112(v21, v17, 0, 0, v5);
				cs2method_10283(v25, v12, 0, 0, v5);
				v14 = v20;
				int v26 = v23;
				v3 = cs2method_10461(v26, 1);
			}
		}
		if (v20 == v3 && v14 != -1) {
			v20 = 0;
			int v26 = v14;
			v3 = cs2method_10461(v26, 1);
			v14 = -1;
		} else {
			v20 = cs2method_10060(v20, 1);
		}
	}
	return new script_8381_struct(v21, v17, v25, v12);
}
